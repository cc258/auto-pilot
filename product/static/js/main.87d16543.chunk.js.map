{"version":3,"sources":["3d/Stars.js","images/earth.jpg","images/moon.png","3d/Planets.js","3d/Effects.js","audio/laser.mp3","audio/engine.mp3","audio/engine2.mp3","audio/bg.mp3","audio/warp.mp3","audio/click.mp3","audio/explosion.mp3","audio/hit.wav","audio/index.js","store.js","3d/Particles.js","3d/Enemies.js","3d/Rocks.js","3d/Explosions.js","3d/Rings.js","3d/Track.js","3d/Ship.js","3d/Ship2.js","3d/Ships.js","3d/Rig.js","Hud.js","App.js","index.js"],"names":["Stars","_ref","_ref$count","count","positions","useMemo","i","r","theta","Math","PI","random","phi","acos","x","cos","sin","y","z","push","Float32Array","_jsxs","children","_jsx","attachObject","length","array","itemSize","size","sizeAttenuation","color","fog","Planets","ref","useRef","_useLoader","useLoader","THREE","earthImg","moonImg","_useLoader2","_slicedToArray","texture","moon","scale","position","args","map","roughness","distance","intensity","Effects","composer","_useThree","useThree","scene","gl","camera","useEffect","current","setSize","width","height","useFrame","render","attachArray","undefined","extend","EffectComposer","ShaderPass","RenderPass","UnrealBloomPass","FilmPass","mp3","explosion","explosionAudio","zap","Audio","zapAudio","engine","engineAudio","engine2","engine2Audio","bg","bgAudio","warp","warpAudio","click","clickAudio","hit","hitAudio","guid","useStore","create","set","get","spline","Curves","GrannyKnot","track","cancelLaserTO","cancelExplosionTO","box","sound","type","points","health","lasers","explosions","rocks","randomData","enemies","gridInfo","mutation","t","startTime","Date","now","fov","hits","rings","randomRings","particles","looptime","binormal","normal","clock","mouse","dummy","ray","actions","init","_get","grid","rowNum","round","window","innerHeight","colNum","innerWidth","half","range","centerRowIndex","centerColIndex","id","j","point","index","mouseX","mouseY","x1","y1","unproject","center","rowLength","colLength","getGridInfo","start","toggleSound","addEffect","_get2","time","parameters","path","getPointAt","multiplyScalar","warping","playAudio","audio","filter","test","e","a","concat","previous","updates","data","_objectSpread","state","_toConsumableArray","clearTimeout","setTimeout","rock","find","enemy","some","param","clientX","clientY","updateMouse","autoReset","shoot","arguments","_ref2","console","log","min","copy","offset","max","expandByScalar","result","intersectBox","origin","distanceTo","changeType","restart","radius","Array","fill","pos","clone","add","speed","temp","pickt","tangents","pick","floor","lookAt","getLength","matrix","binormals","toArray","volume","loop","getState","currentTime","play","pause","Particles","instancedMesh","_useStore","forEach","particle","rotation","updateMatrix","setMatrixAt","instanceMatrix","needsUpdate","frustumCulled","setFromCenterAndSize","hotpink","Rocks","gltf","GLTFLoader","font","parse","myFont","_createElement","Rock","key","React","memo","nodes","materials","getElapsedTime","geometry","node_id4_Material_52_0","material","Material_52","make","createRef","normalize","Explosions","Explosion","group","_ref3","mesh","_ref4","_ref5","vec","opacity","_ref6","transparent","side","Rings","f","onUpdate","self","quaternion","setFromRotationMatrix","Track","lightgreen","laserMaterial","crossMaterial","direction","Ship","main","laserGroup","laserLight","exhaust","cross","target","getWorldPosition","getWorldDirection","negate","visible","name","renderOrder","Rig","rig","segments","pickNext","subVectors","dir","getTangentAt","updateProjectionMatrix","lightPos","Hud","toggle","healthRef","seconds","setInterval","innerText","toFixed","clearInterval","_Fragment","UpperLeft","onClick","UpperRight","style","fontSize","marginLeft","className","UpperCenter","marginBottom","cursor","DownLeft","preventDefault","stopPropagation","Global","base","css","_templateObject","_taggedTemplateLiteral","styled","div","_templateObject2","_templateObject3","_templateObject4","_templateObject5","createGlobalStyle","_templateObject6","App","onPointerMove","Canvas","linear","mode","dpr","antialias","near","far","onCreated","setClearColor","attach","Suspense","fallback","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.87d16543.chunk.js","sourcesContent":["import React, { useMemo } from 'react'\n\nexport default function Stars({ count = 2000 }) {\n  const positions = useMemo(() => {\n    let positions = []\n    for (let i = 0; i < count; i++) {\n      const r = 4000\n      const theta = 2 * Math.PI * Math.random()\n      const phi = Math.acos(2 * Math.random() - 1)\n      const x = r * Math.cos(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const y = r * Math.sin(theta) * Math.sin(phi) + (-2000 + Math.random() * 4000)\n      const z = r * Math.cos(phi) + (-1000 + Math.random() * 2000)\n      positions.push(x)\n      positions.push(y)\n      positions.push(z)\n    }\n    return new Float32Array(positions)\n  }, [count])\n  return (\n    <points>\n      <bufferGeometry>\n        <bufferAttribute attachObject={['attributes', 'position']} count={positions.length / 3} array={positions} itemSize={3} />\n      </bufferGeometry>\n      <pointsMaterial size={15} sizeAttenuation color=\"white\" fog={false} />\n    </points>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/earth.45ed3b77.jpg\";","export default __webpack_public_path__ + \"static/media/moon.27019542.png\";","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader } from '@react-three/fiber'\nimport earthImg from '../images/earth.jpg'\nimport moonImg from '../images/moon.png'\n\nexport default function Planets() {\n  const ref = useRef()\n  const [texture, moon] = useLoader(THREE.TextureLoader, [earthImg, moonImg])\n  return (\n    <group ref={ref} scale={[100, 100, 100]} position={[-500, -500, 1000]}>\n      <mesh>\n        <sphereGeometry args={[5, 32, 32]} />\n        <meshStandardMaterial map={texture} roughness={1} fog={false} />\n      </mesh>\n      <mesh position={[5, -5, -5]}>\n        <sphereGeometry args={[0.75, 32, 32]} />\n        <meshStandardMaterial roughness={1} map={moon} fog={false} />\n      </mesh>\n      <pointLight position={[-5, -5, -5]} distance={1000} intensity={6} />\n      <mesh position={[-30, -10, -60]}>\n        <sphereGeometry args={[4, 32, 32]} />\n        <meshBasicMaterial color=\"#FFFF99\" fog={false} />\n        <pointLight distance={6100} intensity={50} color=\"white\" />\n      </mesh>\n    </group>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport { extend, useThree, useFrame } from '@react-three/fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { FilmPass } from 'three/examples/jsm/postprocessing/FilmPass'\n\nextend({ EffectComposer, ShaderPass, RenderPass, UnrealBloomPass, FilmPass })\n\nexport default function Effects() {\n  const composer = useRef()\n  const { scene, gl, size, camera } = useThree()\n  useEffect(() => void composer.current.setSize(size.width, size.height), [size])\n  useFrame(() => composer.current.render(), 2)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      <unrealBloomPass attachArray=\"passes\" args={[undefined, 1.8, 1, 0]} />\n    </effectComposer>\n  )\n}\n","export default __webpack_public_path__ + \"static/media/laser.373d639d.mp3\";","export default __webpack_public_path__ + \"static/media/engine.75bbe12e.mp3\";","export default __webpack_public_path__ + \"static/media/engine2.87c3c40a.mp3\";","export default __webpack_public_path__ + \"static/media/bg.898c3fe7.mp3\";","export default __webpack_public_path__ + \"static/media/warp.1f9bec85.mp3\";","export default __webpack_public_path__ + \"static/media/click.db461987.mp3\";","export default __webpack_public_path__ + \"static/media/explosion.615cfd43.mp3\";","export default __webpack_public_path__ + \"static/media/hit.bdaef842.wav\";","import zapAudio from './laser.mp3'\nimport engineAudio from './engine.mp3'\nimport engine2Audio from './engine2.mp3'\nimport bgAudio from './bg.mp3'\nimport warpAudio from './warp.mp3'\nimport clickAudio from './click.mp3'\nimport explosionAudio from './explosion.mp3'\nimport hitAudio from './hit.wav'\n\nconst mp3 = { explosion: explosionAudio }\n\nconst zap = new Audio(zapAudio)\nconst engine = new Audio(engineAudio)\nconst engine2 = new Audio(engine2Audio)\nconst bg = new Audio(bgAudio)\nconst warp = new Audio(warpAudio)\nconst click = new Audio(clickAudio)\nconst explosion = new Audio(explosionAudio)\nconst hit = new Audio(hitAudio)\n\nexport { zap, engine, engine2, bg, warp, click, explosion, hit, mp3 }\n","import * as THREE from 'three'\nimport { Curves } from 'three/examples/jsm/curves/CurveExtras'\nimport { addEffect } from '@react-three/fiber'\nimport create from 'zustand'\nimport * as audio from './audio'\n\nlet guid = 1\n\nconst useStore = create((set, get) => {\n  let spline = new Curves.GrannyKnot()\n  let track = new THREE.TubeBufferGeometry(spline, 250, 0.2, 10, true)\n  let cancelLaserTO = undefined\n  let cancelExplosionTO = undefined\n  const box = new THREE.Box3()\n\n  return {\n    sound: false,\n    camera: undefined,\n    type: 'free',\n    points: 0,\n    health: 100,\n    lasers: [],\n    explosions: [],\n    rocks: randomData(100, track, 150, 8, () => 1 + Math.random() * 2.5),\n    enemies: randomData(10, track, 20, 15, 1),\n    gridInfo: undefined,\n\n    mutation: {\n      t: 0,\n      position: new THREE.Vector3(),\n      startTime: Date.now(),\n\n      track,\n      scale: 15,\n      fov: 70,\n      hits: false,\n      rings: randomRings(30, track),\n      particles: randomData(150, track, 100, 1, () => 0.5 + Math.random() * 0.8),\n      looptime: 40 * 1000,\n      binormal: new THREE.Vector3(),\n      normal: new THREE.Vector3(),\n      clock: new THREE.Clock(false),\n      mouse: new THREE.Vector2(-250, 50),\n\n      // Re-usable objects\n      dummy: new THREE.Object3D(),\n      ray: new THREE.Ray(),\n      box: new THREE.Box3()\n    },\n\n    actions: {\n      init(camera) {\n        const { mutation, actions } = get()\n        const gridInfo = getGridInfo(camera)\n        set({ camera, gridInfo })\n        mutation.clock.start()\n        actions.toggleSound(get().sound)\n        let lock = false\n\n        addEffect(() => {\n          const { rocks, enemies, health } = get()\n\n          if (health <= 0) {\n            return\n          }\n\n          const time = Date.now()\n          const t = (mutation.t = ((time - mutation.startTime) % mutation.looptime) / mutation.looptime)\n          mutation.position = track.parameters.path.getPointAt(t)\n          mutation.position.multiplyScalar(mutation.scale)\n\n          // test for wormhole/warp\n          let warping = false\n          if (t > 0.3 && t < 0.4) {\n            if (!warping) {\n              warping = true\n              playAudio(audio.warp)\n            }\n          } else if (t > 0.5) warping = false\n\n          // test for hits\n          const r = rocks.filter(actions.test)\n          const e = enemies.filter(actions.test)\n          const a = r.concat(e)\n          const previous = mutation.hits\n          mutation.hits = a.length\n          if (previous === 0 && mutation.hits) playAudio(audio.click)\n          const lasers = get().lasers\n          if (mutation.hits && lasers.length && time - lasers[lasers.length - 1] < 100) {\n            const updates = a.map((data) => ({ time: Date.now(), ...data }))\n            set((state) => ({ explosions: [...state.explosions, ...updates] }))\n            clearTimeout(cancelExplosionTO)\n            cancelExplosionTO = setTimeout(() => set((state) => ({ explosions: state.explosions.filter(({ time }) => Date.now() - time <= 1000) })), 1000)\n            set((state) => ({\n              points: state.points + r.length * 100 + e.length * 200,\n              rocks: state.rocks.filter((rock) => !r.find((r) => r.guid === rock.guid)),\n              enemies: state.enemies.filter((enemy) => !e.find((e) => e.guid === enemy.guid))\n            }))\n          }\n          // TODO\n          if (get().type && a.some((data) => data.distance < 30)) {\n            const param = { clientX: Math.round(Math.random() * (1400 - 100)) + 100, clientY: Math.round(Math.random() * (500 - 100)) + 100 }\n\n            actions.updateMouse(param)\n            clearTimeout(autoReset)\n            const autoReset = setTimeout(() => {\n              actions.updateMouse({ clientX: window.innerWidth / 2, clientY: window.innerHeight * 0.8 })\n            }, 3000)\n          }\n\n          if (a.some((data) => data.distance < 15)) {\n            // 撞击时播放声音\n            playAudio(audio.explosion)\n            set((state) => ({ health: state.health - 1 }))\n          }\n        })\n      },\n      shoot() {\n        set((state) => ({ lasers: [...state.lasers, Date.now()] }))\n        clearTimeout(cancelLaserTO)\n        cancelLaserTO = setTimeout(() => set((state) => ({ lasers: state.lasers.filter((t) => Date.now() - t <= 1000) })), 1000)\n        playAudio(audio.zap, 0.5)\n      },\n      toggleSound(sound = !get().sound) {\n        set({ sound })\n        playAudio(audio.engine, 1, true)\n        playAudio(audio.engine2, 0.3, true)\n        playAudio(audio.bg, 1, true)\n      },\n      updateMouse({ clientX: x, clientY: y }) {\n        console.log('updateMouse: ', x, y)\n        get().mutation.mouse.set(x - window.innerWidth / 2, y - window.innerHeight / 2)\n      },\n      test(data) {\n        box.min.copy(data.offset)\n        box.max.copy(data.offset)\n        box.expandByScalar(data.size * data.scale)\n        data.hit.set(10000, 10000, 10000)\n        const result = get().mutation.ray.intersectBox(box, data.hit)\n        data.distance = get().mutation.ray.origin.distanceTo(data.hit)\n        return result\n      },\n      changeType() {\n        set({\n          type: get().type ? undefined : 'free'\n        })\n      },\n      restart() {\n        set({\n          health: 100,\n          points: 0,\n          lasers: [],\n          explosions: [],\n          type: 'free',\n          rocks: randomData(100, track, 150, 8, () => 1 + Math.random() * 2.5),\n          enemies: randomData(10, track, 20, 15, 1)\n        })\n      }\n    }\n  }\n})\n\nfunction randomData(count, track, radius, size, scale) {\n  return new Array(count).fill().map(() => {\n    const t = Math.random()\n    const pos = track.parameters.path.getPointAt(t)\n    pos.multiplyScalar(15)\n    const offset = pos\n      .clone()\n      .add(new THREE.Vector3(-radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2, -radius + Math.random() * radius * 2))\n    const speed = 0.1 + Math.random()\n    return { guid: guid++, scale: typeof scale === 'function' ? scale() : scale, size, offset, pos, speed, radius, t, hit: new THREE.Vector3(), distance: 1000 }\n  })\n}\n\nfunction randomRings(count, track) {\n  let temp = []\n  let t = 0.4\n  for (let i = 0; i < count; i++) {\n    t += 0.003\n    const pos = track.parameters.path.getPointAt(t)\n    pos.multiplyScalar(15)\n    const segments = track.tangents.length\n    const pickt = t * segments\n    const pick = Math.floor(pickt)\n    const lookAt = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(15)\n    const matrix = new THREE.Matrix4().lookAt(pos, lookAt, track.binormals[pick])\n    temp.push([pos.toArray(), matrix])\n  }\n  return temp\n}\n\nfunction playAudio(audio, volume = 1, loop = false) {\n  if (useStore.getState().sound) {\n    audio.currentTime = 0\n    audio.volume = volume\n    audio.loop = loop\n    audio.play()\n  } else audio.pause()\n}\n\nfunction getGridInfo(camera) {\n  const grid = []\n  const size = 200\n  const rowNum = Math.round(window.innerHeight / size)\n  const colNum = Math.round(window.innerWidth / size)\n  const half = size / 2\n  const range = []\n  let centerRowIndex = Math.round(rowNum / 2) - 1\n  let centerColIndex = Math.round(colNum / 2) - 1\n  let id = 1\n\n  if (centerRowIndex < 0) {\n    centerRowIndex = 0\n  }\n  if (centerColIndex < 0) {\n    centerColIndex = 0\n  }\n\n  for (let i = 0; i < rowNum; i++) {\n    grid[i] = []\n    for (let j = 0; j < colNum; j++) {\n      const point = {\n        id: id++,\n        x: j * size + half,\n        y: i * size + half,\n        index: [i, j],\n        hits: []\n      }\n      point.mouseX = point.x - window.innerWidth / 2\n      point.mouseY = point.y - window.innerHeight / 2\n      const x1 = (point.x / window.innerWidth) * 2 - 1\n      const y1 = -(point.y / window.innerHeight) * 2 + 1\n      const stdVector = new THREE.Vector3(x1, y1, 0.5)\n      const worldVector = stdVector.unproject(camera)\n\n      point.ray = new THREE.Ray()\n      point.box = new THREE.Box3()\n      // point.ray.origin = worldVector\n      // point.direction = worldVector.normalize()\n      // point.worldVector = worldVector\n\n      grid[i][j] = point\n\n      // if (j >= centerColIndex - 1 && j <= centerColIndex + 1) {\n      //   range.push(point)\n      // }\n      range.push(point)\n    }\n  }\n\n  return { grid, center: grid[centerRowIndex][centerColIndex], centerRowIndex, centerColIndex, rowLength: rowNum, colLength: colNum, range }\n}\n\nfunction getAvoidPoint(gridInfo, rocks, lock) {\n  // if (lock) {\n  //   return\n  // }\n  // lock = true;\n  const test = (point, rock) => {\n    point.box.min.copy(rock.offset)\n    point.box.max.copy(rock.offset)\n    point.box.expandByScalar(rock.size * rock.scale)\n    rock.hit.set(10000, 10000, 10000)\n    const result = point.ray.intersectBox(point.box, rock.hit)\n    return result\n  }\n\n  let found\n  // let index = Math.floor(Math.random() * gridInfo.range.length)\n  // let point = gridInfo.range[index]\n  // for (let i = 0; i < gridInfo.range.length; i++) {\n  //   let point = gridInfo.range[i]\n  //   const newRocks = rocks.filter((rock) => {\n  //     return test(point, rock)\n  //   })\n\n  //   point.hits = newRocks\n\n  //   if (!newRocks.length) {\n  //     found = point\n  //     break\n  //   }\n  // }\n\n  const checkLeft = (rowIndex, mid, min) => {\n    let found\n    for (let i = mid; i >= min; i--) {\n      const point = gridInfo.grid[rowIndex][i]\n      const newRocks = rocks.filter((rock) => {\n        return test(point, rock)\n      })\n      point.hits = newRocks\n      if (!newRocks.length) {\n        found = point\n        break\n      }\n    }\n    return found\n  }\n\n  const checkRight = (rowIndex, mid, max) => {\n    let found\n    for (let i = mid; i <= max; i++) {\n      const point = gridInfo.grid[rowIndex][i]\n      const newRocks = rocks.filter((rock) => {\n        return test(point, rock)\n      })\n      point.hits = newRocks\n      if (!newRocks.length) {\n        found = point\n        break\n      }\n    }\n    return found\n  }\n\n  let curRowIndex = gridInfo.centerRowIndex\n  while (curRowIndex >= 0 && !found) {\n    found = checkLeft(curRowIndex, gridInfo.centerColIndex, 0)\n    if (!found) {\n      found = checkRight(curRowIndex, gridInfo.centerColIndex + 1, gridInfo.colLength - 1)\n    }\n    curRowIndex--\n  }\n\n  curRowIndex = gridInfo.centerRowIndex + 1\n  while (curRowIndex < gridInfo.rowLength && !found) {\n    found = checkLeft(curRowIndex, gridInfo.centerColIndex, 0)\n    if (!found) {\n      found = checkRight(curRowIndex, gridInfo.centerColIndex + 1, gridInfo.colLength - 1)\n    }\n    curRowIndex++\n  }\n\n  return found\n}\n\nexport default useStore\nexport { audio, playAudio }\n","import React, { useRef, useEffect } from 'react'\nimport useStore from '../store'\n\nexport default function Particles() {\n  const instancedMesh = useRef()\n  const { particles, dummy } = useStore((state) => state.mutation)\n\n  useEffect(() => {\n    particles.forEach((particle, i) => {\n      const { offset, scale } = particle\n      dummy.position.copy(offset)\n      dummy.scale.set(scale, scale, scale)\n      dummy.rotation.set(Math.sin(Math.random()) * Math.PI, Math.sin(Math.random()) * Math.PI, Math.cos(Math.random()) * Math.PI)\n      dummy.updateMatrix()\n      instancedMesh.current.setMatrixAt(i, dummy.matrix)\n    })\n    instancedMesh.current.instanceMatrix.needsUpdate = true\n  }, [])\n\n  return (\n    <instancedMesh ref={instancedMesh} args={[null, null, particles.length]} frustumCulled={false}>\n      <coneGeometry args={[2, 2, 3]} />\n      <meshStandardMaterial color=\"#606060\" />\n    </instancedMesh>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\n\nexport default function Enemies() {\n  const enemies = useStore((state) => state.enemies)\n  return enemies.map((data, i) => <Drone key={i} data={data} />)\n}\n\nconst box = new THREE.Box3()\nbox.setFromCenterAndSize(new THREE.Vector3(0, 0, 1), new THREE.Vector3(3, 3, 3))\nconst glowMaterial = new THREE.MeshBasicMaterial({ color: new THREE.Color('lightblue') })\nconst bodyMaterial = new THREE.MeshPhongMaterial({ color: new THREE.Color('black') })\n\nconst Drone = React.memo(({ data }) => {\n  const { clock } = useStore((state) => state.mutation)\n  const { nodes, materials } = useLoader(GLTFLoader, '/drone.gltf')\n  const ref = useRef()\n\n  useFrame(() => {\n    const r = Math.cos((clock.getElapsedTime() / 2) * data.speed) * Math.PI\n    ref.current && ref.current.position.copy(data.offset)\n    ref.current && ref.current.rotation.set(r, r, r)\n  })\n\n  return (\n    <group ref={ref} scale={[5, 5, 5]}>\n      <mesh position={[0, 0, 50]} rotation={[Math.PI / 2, 0, 0]} material={glowMaterial}>\n        <cylinderBufferGeometry args={[0.25, 0.25, 100, 4]} />\n      </mesh>\n      <mesh name=\"Sphere_DroneGlowmat_0\" geometry={nodes.Sphere_DroneGlowmat_0.geometry} material={materials.DroneGlowmat} />\n      <mesh name=\"Sphere_Body_0\" geometry={nodes.Sphere_Body_0.geometry} material={bodyMaterial} />\n    </group>\n  )\n})\n","import React, { useRef } from 'react'\nimport * as THREE from 'three'\nimport { useFrame, useLoader } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport myFont from 'three/examples/fonts/helvetiker_regular.typeface.json'\nimport useStore from '../store'\n\nconst hotpink = new THREE.Color('hotpink')\nconst crossMaterial = new THREE.MeshBasicMaterial({ color: hotpink, fog: false })\ncrossMaterial.color = hotpink\n\nexport default function Rocks() {\n  const gltf = useLoader(GLTFLoader, '/rock.gltf')\n  const font = new THREE.FontLoader().parse(myFont)\n  const rocks = useStore((state) => state.rocks)\n  return rocks.map((data) => <Rock {...gltf} key={data.guid} data={data} font={font} />)\n}\n\nconst Rock = React.memo(({ nodes, materials, data, font }) => {\n  const ref = useRef()\n  const { clock } = useStore((state) => state.mutation)\n  useFrame(() => {\n    const r = Math.cos((clock.getElapsedTime() / 2) * data.speed) * Math.PI\n    ref.current && ref.current.rotation.set(r, r, r)\n  })\n  return (\n    <group ref={ref} position={data.offset} scale={[data.scale, data.scale, data.scale]}>\n      <group\n        position={[-0.016298329457640648, -0.012838120572268963, 0.24073271453380585]}\n        rotation={[3.0093872578726644, 0.27444228385461117, -0.22745113653772078]}\n        scale={[20, 20, 20]}>\n        <mesh geometry={nodes.node_id4_Material_52_0.geometry} material={materials.Material_52} material-roughness={1} material-metalness={1} />\n\n        {/* <mesh position={[0, 0, 0]}>\n          <textGeometry args={[String(data.distance), { font, size: 0.2, height: 0.2 }]} />\n          <meshLambertMaterial attach=\"material\" color={'gold'} />\n        </mesh> */}\n      </group>\n    </group>\n  )\n})\n","import * as THREE from 'three'\nimport React, { useRef, useMemo, useEffect } from 'react'\nimport { useFrame } from '@react-three/fiber'\nimport useStore, { audio, playAudio } from '../store'\n\nfunction make(color, speed) {\n  return {\n    ref: React.createRef(),\n    color,\n    data: new Array(20)\n      .fill()\n      .map(() => [\n        new THREE.Vector3(),\n        new THREE.Vector3(-1 + Math.random() * 2, -1 + Math.random() * 2, -1 + Math.random() * 2).normalize().multiplyScalar(speed * 0.75)\n      ])\n  }\n}\n\nexport default function Explosions() {\n  const explosions = useStore((state) => state.explosions)\n  return explosions.map(({ guid, offset, scale }) => <Explosion key={guid} position={offset} scale={scale * 0.75} />)\n}\n\nfunction Explosion({ position, scale }) {\n  const group = useRef()\n  const { dummy } = useStore((state) => state.mutation)\n  const particles = useMemo(() => [make('white', 0.8), make('orange', 0.6)], [])\n\n  useEffect(() => void playAudio(new Audio(audio.mp3.explosion), 0.5), [])\n\n  useFrame(() => {\n    particles.forEach(({ data }, type) => {\n      if (group.current && group.current.children) {\n        const mesh = group.current.children[type]\n        data.forEach(([vec, normal], i) => {\n          vec.add(normal)\n          dummy.position.copy(vec)\n          dummy.updateMatrix()\n          mesh.setMatrixAt(i, dummy.matrix)\n        })\n        mesh.material.opacity -= 0.025\n        mesh.instanceMatrix.needsUpdate = true\n      }\n    })\n  })\n\n  return (\n    <group ref={group} position={position} scale={[scale, scale, scale]}>\n      {particles.map(({ color, data }, index) => (\n        <instancedMesh key={index} args={[null, null, data.length]} frustumCulled={false}>\n          <dodecahedronGeometry args={[10, 0]} />\n          <meshBasicMaterial color={color} transparent opacity={1} fog={false} />\n        </instancedMesh>\n      ))}\n    </group>\n  )\n}\n","import * as THREE from 'three'\nimport React from 'react'\nimport useStore from '../store'\n\nconst geometry = new THREE.RingBufferGeometry(1, 1.01, 64)\nconst material = new THREE.MeshBasicMaterial({ color: new THREE.Color('lightgreen'), side: THREE.DoubleSide })\n\nexport default function Rings() {\n  const { rings } = useStore(state => state.mutation)\n  return rings.map(([pos, matrix], i) => {\n    const f = (Math.sin(i / 10) * Math.PI) / 2\n    return (\n      <mesh\n        key={i}\n        position={pos}\n        scale={[30 + i * 5 * f, 30 + i * 5 * f, 30 + i * 5 * f]}\n        onUpdate={self => self.quaternion.setFromRotationMatrix(matrix)}\n        geometry={geometry}\n        material={material}\n      />\n    )\n  })\n}\n","import React from 'react'\nimport useStore from '../store'\n\nexport default function Track() {\n  const { scale, track } = useStore((state) => state.mutation)\n  return (\n    <mesh scale={[scale, scale, scale]} geometry={track}>\n      <meshBasicMaterial color=\"indianred\" />\n    </mesh>\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\n\nconst geometry = new THREE.BoxBufferGeometry(1, 1, 40)\nconst lightgreen = new THREE.Color('lightgreen')\nconst hotpink = new THREE.Color('hotpink')\nconst laserMaterial = new THREE.MeshBasicMaterial({ color: lightgreen })\nconst crossMaterial = new THREE.MeshBasicMaterial({ color: hotpink, fog: false })\nconst position = new THREE.Vector3()\nconst direction = new THREE.Vector3()\n\nexport default function Ship() {\n  const { nodes } = useLoader(GLTFLoader, '/ship.gltf')\n  const mutation = useStore((state) => state.mutation)\n  const health = useStore((state) => state.health)\n  const type = useStore((state) => state.type)\n  const { clock, mouse, ray } = mutation\n  const lasers = useStore((state) => state.lasers)\n  const main = useRef()\n  const laserGroup = useRef()\n  const laserLight = useRef()\n  const exhaust = useRef()\n  const cross = useRef()\n  const target = useRef()\n\n  useFrame(() => {\n    if (health <= 0) {\n      return\n    }\n\n    main.current.position.z = Math.sin(clock.getElapsedTime() * 40) * Math.PI * 0.2\n\n    main.current.rotation.z += (mouse.x / 500 - main.current.rotation.z) * 0.2\n    main.current.rotation.x += (-mouse.y / 1200 - main.current.rotation.x) * 0.2\n    main.current.rotation.y += (-mouse.x / 1200 - main.current.rotation.y) * 0.2\n    main.current.position.x += (mouse.x / 10 - main.current.position.x) * 0.2\n    main.current.position.y += (25 + -mouse.y / 10 - main.current.position.y) * 0.2\n\n    exhaust.current.scale.x = 1 + Math.sin(clock.getElapsedTime() * 200)\n    exhaust.current.scale.y = 1 + Math.sin(clock.getElapsedTime() * 200)\n    for (let i = 0; i < lasers.length; i++) {\n      const group = laserGroup.current.children[i]\n      group.position.z -= 20\n    }\n    laserLight.current.intensity += ((lasers.length && Date.now() - lasers[lasers.length - 1] < 100 ? 20 : 0) - laserLight.current.intensity) * 0.3\n\n    // Get ships orientation and save it to the stores ray\n    main.current.getWorldPosition(position)\n    main.current.getWorldDirection(direction)\n    ray.origin.copy(position)\n    ray.direction.copy(direction.negate())\n\n    // ...\n    crossMaterial.color = mutation.hits ? lightgreen : hotpink\n    cross.current.visible = !mutation.hits\n    target.current.visible = !!mutation.hits\n  })\n\n  return (\n    health > 0 && (\n      <group ref={main}>\n        <group scale={[3.5, 3.5, 3.5]}>\n          <group ref={cross} position={[0, 0, -300]} name=\"cross\">\n            <mesh renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[20, 2, 2]} />\n            </mesh>\n            <mesh renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[2, 20, 2]} />\n            </mesh>\n          </group>\n          <group ref={target} position={[0, 0, -300]} name=\"target\">\n            <mesh position={[0, 20, 0]} renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[40, 2, 2]} />\n            </mesh>\n            <mesh position={[0, -20, 0]} renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[40, 2, 2]} />\n            </mesh>\n            <mesh position={[20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[2, 40, 2]} />\n            </mesh>\n            <mesh position={[-20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[2, 40, 2]} />\n            </mesh>\n          </group>\n          <pointLight ref={laserLight} position={[0, 0, -20]} distance={100} intensity={0} color=\"lightgreen\" />\n          <group ref={laserGroup}>\n            {lasers.map((t, i) => (\n              <group key={i}>\n                <mesh position={[-2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n                <mesh position={[2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n              </group>\n            ))}\n          </group>\n          <group rotation={[Math.PI / 2, Math.PI, 0]}>\n            <mesh name=\"Renault_(S,_T1)_0\" geometry={nodes['Renault_(S,_T1)_0'].geometry}>\n              <meshStandardMaterial color=\"red\" />\n            </mesh>\n            <mesh name=\"Renault_(S,_T1)_1\" geometry={nodes['Renault_(S,_T1)_1'].geometry}>\n              <meshStandardMaterial color=\"blue\" />\n            </mesh>\n            <mesh name=\"Renault_(S,_T1)_2\" geometry={nodes['Renault_(S,_T1)_2'].geometry}>\n              <meshStandardMaterial color=\"red\" />\n            </mesh>\n            <mesh name=\"Renault_(S,_T1)_3\" geometry={nodes['Renault_(S,_T1)_3'].geometry}>\n              <meshBasicMaterial color=\"deepskyblue\" />\n            </mesh>\n            <mesh name=\"Renault_(S,_T1)_4\" geometry={nodes['Renault_(S,_T1)_4'].geometry}>\n              <meshBasicMaterial color=\"gray\" />\n            </mesh>\n            <mesh name=\"Renault_(S,_T1)_5\" geometry={nodes['Renault_(S,_T1)_5'].geometry}>\n              <meshBasicMaterial color=\"deepskyblue\" />\n            </mesh>\n          </group>\n        </group>\n        <mesh ref={exhaust} scale={[1, 1, 30]} position={[0, 1, 30]}>\n          <dodecahedronBufferGeometry args={[1.5, 0]} />\n          <meshBasicMaterial color=\"orange\" />\n        </mesh>\n      </group>\n    )\n  )\n}\n","import * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useLoader, useFrame } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\n\nconst geometry = new THREE.BoxBufferGeometry(1, 1, 40)\nconst lightgreen = new THREE.Color('lightgreen')\nconst hotpink = new THREE.Color('hotpink')\nconst laserMaterial = new THREE.MeshBasicMaterial({ color: lightgreen })\nconst crossMaterial = new THREE.MeshBasicMaterial({ color: hotpink, fog: false })\nconst position = new THREE.Vector3()\nconst direction = new THREE.Vector3()\n\nexport default function Ship2({ x, y, mouseX, mouseY, ray, hits }) {\n  const { nodes } = useLoader(GLTFLoader, '/ship.gltf')\n  const mutation = useStore((state) => state.mutation)\n  const health = useStore((state) => state.health)\n\n  const { clock } = mutation\n  const lasers = useStore((state) => state.lasers)\n  const main = useRef()\n  const laserGroup = useRef()\n  const laserLight = useRef()\n  const exhaust = useRef()\n  const cross = useRef()\n  const target = useRef()\n\n  // console.log(clock, mouse, ray)\n\n  useFrame(() => {\n    if (health <= 0) {\n      return\n    }\n\n    main.current.position.z = Math.sin(clock.getElapsedTime() * 40) * Math.PI * 0.2\n    main.current.rotation.z += (mouseX / 500 - main.current.rotation.z) * 0.2\n    main.current.rotation.x += (-mouseY / 1200 - main.current.rotation.x) * 0.2\n    main.current.rotation.y += (-mouseX / 1200 - main.current.rotation.y) * 0.2\n    main.current.position.x += (mouseX / 10 - main.current.position.x) * 0.2\n    main.current.position.y += (25 + -mouseY / 10 - main.current.position.y) * 0.2\n\n    // exhaust.current.scale.x = 1 + Math.sin(clock.getElapsedTime() * 200)\n    // exhaust.current.scale.y = 1 + Math.sin(clock.getElapsedTime() * 200)\n    // for (let i = 0; i < lasers.length; i++) {\n    //   const group = laserGroup.current.children[i]\n    //   group.position.z -= 20\n    // }\n    // laserLight.current.intensity += ((lasers.length && Date.now() - lasers[lasers.length - 1] < 100 ? 20 : 0) - laserLight.current.intensity) * 0.3\n\n    // Get ships orientation and save it to the stores ray\n    main.current.getWorldPosition(position)\n    main.current.getWorldDirection(direction)\n    ray.origin.copy(position)\n    ray.direction.copy(direction.negate())\n\n    // ...\n    crossMaterial.color = hits && hits.length ? lightgreen : hotpink\n    cross.current.visible = !hits || !hits.length\n    // target.current.visible = !!mutation.hits\n  })\n\n  return (\n    health > 0 && (\n      <group ref={main}>\n        <group scale={[3.5, 3.5, 3.5]}>\n          <group ref={cross} position={[0, 0, -300]} name=\"cross\">\n            {/* <mesh renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[20, 2, 2]} />\n            </mesh>\n            <mesh renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[2, 20, 2]} />\n            </mesh> */}\n          </group>\n          {/* <group ref={target} position={[0, 0, -300]} name=\"target\">\n            <mesh position={[0, 20, 0]} renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[40, 2, 2]} />\n            </mesh>\n            <mesh position={[0, -20, 0]} renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[40, 2, 2]} />\n            </mesh>\n            <mesh position={[20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[2, 40, 2]} />\n            </mesh>\n            <mesh position={[-20, 0, 0]} renderOrder={1000} material={crossMaterial}>\n              <boxGeometry args={[2, 40, 2]} />\n            </mesh>\n          </group> */}\n          {/* <pointLight ref={laserLight} position={[0, 0, -20]} distance={100} intensity={0} color=\"lightgreen\" /> */}\n          {/* <group ref={laserGroup}>\n            {lasers.map((t, i) => (\n              <group key={i}>\n                <mesh position={[-2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n                <mesh position={[2.8, 0, -0.8]} geometry={geometry} material={laserMaterial} />\n              </group>\n            ))}\n          </group> */}\n          {/* <group rotation={[Math.PI / 2, Math.PI, 0]}>\n            <mesh name=\"Renault_(S,_T1)_0\" geometry={nodes['Renault_(S,_T1)_0'].geometry}>\n              <meshStandardMaterial color=\"#070707\" />\n            </mesh>\n            <mesh name=\"Renault_(S,_T1)_1\" geometry={nodes['Renault_(S,_T1)_1'].geometry}>\n              <meshStandardMaterial color=\"black\" />\n            </mesh>\n            <mesh name=\"Renault_(S,_T1)_2\" geometry={nodes['Renault_(S,_T1)_2'].geometry}>\n              <meshStandardMaterial color=\"#070707\" />\n            </mesh>\n            <mesh name=\"Renault_(S,_T1)_3\" geometry={nodes['Renault_(S,_T1)_3'].geometry}>\n              <meshBasicMaterial color=\"lightblue\" />\n            </mesh>\n            <mesh name=\"Renault_(S,_T1)_4\" geometry={nodes['Renault_(S,_T1)_4'].geometry}>\n              <meshBasicMaterial color=\"white\" />\n            </mesh>\n            <mesh name=\"Renault_(S,_T1)_5\" geometry={nodes['Renault_(S,_T1)_5'].geometry}>\n              <meshBasicMaterial color=\"teal\" />\n            </mesh>\n          </group> */}\n        </group>\n        {/* <mesh ref={exhaust} scale={[1, 1, 30]} position={[0, 1, 30]}>\n          <dodecahedronBufferGeometry args={[1.5, 0]} />\n          <meshBasicMaterial color=\"lightblue\" />\n        </mesh> */}\n      </group>\n    )\n  )\n}\n","import * as THREE from 'three'\nimport React, { memo, useRef } from 'react'\nimport { useLoader, useFrame } from '@react-three/fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport useStore from '../store'\nimport Ship from './Ship'\nimport Ship2 from './Ship2'\n\nconst Ships = () => {\n  const gridInfo = useStore((state) => state.gridInfo)\n  const items = gridInfo\n    ? gridInfo.range.map((item, index) => {\n        return <Ship2 key={item.id} mouseX={item.mouseX} mouseY={item.mouseY} ray={item.ray} box={item.box} hits={item.hits} />\n      })\n    : []\n\n  return items\n}\n\nexport default memo(Ships)\n","import React, { useRef } from 'react'\nimport { useThree, useFrame } from '@react-three/fiber'\nimport useStore from '../store'\n\nlet offset = 0\nexport default function Rig({ children }) {\n  const group = useRef()\n  const rig = useRef()\n  const mutation = useStore((state) => state.mutation)\n  const { fov, scale, binormal, normal, track, mouse } = mutation\n  const { camera } = useThree()\n\n  useFrame(() => {\n    const t = mutation.t\n    const pos = mutation.position.clone()\n    const segments = track.tangents.length\n    const pickt = t * segments\n    const pick = Math.floor(pickt)\n    const pickNext = (pick + 1) % segments\n    binormal.subVectors(track.binormals[pickNext], track.binormals[pick])\n    binormal.multiplyScalar(pickt - pick).add(track.binormals[pick])\n    const dir = track.parameters.path.getTangentAt(t)\n    offset += (Math.max(15, 15 + -mouse.y / 20) - offset) * 0.05\n    normal.copy(binormal).cross(dir)\n    pos.add(normal.clone().multiplyScalar(offset))\n    camera.position.copy(pos)\n    const lookAt = track.parameters.path.getPointAt((t + 30 / track.parameters.path.getLength()) % 1).multiplyScalar(scale)\n    camera.matrix.lookAt(camera.position, lookAt, normal)\n    camera.quaternion.setFromRotationMatrix(camera.matrix)\n    camera.fov += ((t > 0.4 && t < 0.45 ? 120 : fov) - camera.fov) * 0.05\n    camera.updateProjectionMatrix()\n    const lightPos = track.parameters.path.getPointAt((t + 1 / track.parameters.path.getLength()) % 1).multiplyScalar(scale)\n    group.current.position.copy(lightPos)\n    group.current.quaternion.setFromRotationMatrix(camera.matrix)\n  })\n\n  return (\n    <group ref={group}>\n      <pointLight distance={400} position={[0, 100, -420]} intensity={5} color=\"indianred\" />\n      <group ref={rig} position={[0, 0, -50]}>\n        {children}\n      </group>\n    </group>\n  )\n}\n","import React, { useMemo, useRef, useEffect } from 'react'\nimport styled, { css, createGlobalStyle } from 'styled-components'\nimport useStore from './store'\n\nexport default function Hud() {\n  const points = useStore((state) => state.points)\n  const health = useStore((state) => state.health)\n  const sound = useStore((state) => state.sound)\n  const type = useStore((state) => state.type)\n  const toggle = useStore((state) => state.actions.toggleSound)\n  const changeType = useStore((state) => state.actions.changeType)\n  const actions = useStore((state) => state.actions)\n  const healthRef = useRef(health)\n  const seconds = useRef()\n\n  useEffect(() => {\n    healthRef.current = health\n  }, [health])\n\n  useEffect(() => {\n    let t = Date.now()\n    const i = setInterval(() => {\n      if (!healthRef.current) {\n        t = Date.now()\n        seconds.current.innerText = '0.0'\n        return\n      }\n      seconds.current.innerText = ((Date.now() - t) / 1000).toFixed(1)\n    }, 100)\n    return () => clearInterval(i)\n  }, [])\n\n  const score = useMemo(() => (points >= 1000 ? (points / 1000).toFixed(1) + 'K' : points), [points])\n  return (\n    <>\n      <UpperLeft onClick={() => toggle()}>\n        sound\n        <br />\n        {sound ? 'off' : 'on'}\n      </UpperLeft>\n      <UpperRight>\n        <h2>\n          <span ref={seconds}>0.0</span>\n          <span style={{ fontSize: 28, marginLeft: 10 }}>s</span>\n        </h2>\n        {/* <h1>{score}</h1> */}\n        <div className=\"health\" style={{ width: health + '%' }}>\n          {health}%&nbsp;\n        </div>\n      </UpperRight>\n      {health <= 0 && (\n        <UpperCenter>\n          <h1 style={{ marginBottom: 10 }}>GAME OVER</h1>\n          <span\n            style={{ cursor: 'pointer' }}\n            onClick={() => {\n              actions.restart()\n            }}>\n            RESTART\n          </span>\n        </UpperCenter>\n      )}\n      {health && (\n        <DownLeft\n          onClick={(e) => {\n            e.preventDefault()\n            e.stopPropagation()\n            changeType()\n          }}>\n          {type ? '> Stop Auto pilot' : '> Start Auto pilot'}\n        </DownLeft>\n      )}\n\n      <Global />\n    </>\n  )\n}\n\nconst base = css`\n  font-family: 'Teko', sans-serif;\n  position: absolute;\n  text-transform: uppercase;\n  font-weight: 900;\n  font-variant-numeric: slashed-zero tabular-nums;\n  line-height: 1em;\n  pointer-events: none;\n  color: indianred;\n`\n\nconst UpperLeft = styled.div`\n  ${base}\n  top: 40px;\n  left: 50px;\n  font-size: 2em;\n  transform: skew(5deg, 5deg);\n  pointer-events: all;\n  cursor: pointer;\n  @media only screen and (max-width: 900px) {\n    font-size: 1.5em;\n  }\n`\nconst DownLeft = styled.div`\n  ${base}\n  bottom: 40px;\n  left: 50px;\n  font-size: 2em;\n  // transform: skew(5deg, 5deg);\n  pointer-events: all;\n  cursor: pointer;\n  @media only screen and (max-width: 900px) {\n    font-size: 1.5em;\n  }\n`\n\nconst UpperRight = styled.div`\n  ${base}\n  top: 40px;\n  right: 50px;\n  text-align: right;\n  transform: skew(-5deg, -5deg);\n  width: 200px;\n  .health {\n    color: #fff;\n    font-size: 40px;\n    line-height: 40px;\n    height: 40px;\n  }\n  & > h2 {\n    margin: 0;\n    font-size: 4em;\n    line-height: 1em;\n  }\n  & > div {\n    height: 2em;\n    width: 100%;\n    background: indianred;\n  }\n  @media only screen and (max-width: 900px) {\n    bottom: 30px;\n    & > h1 {\n      font-size: 6em !important;\n    }\n    & > h2 {\n      font-size: 3em !important;\n    }\n  }\n`\n\nconst UpperCenter = styled.div`\n  ${base}\n  top: 50%;\n  left: 50%;\n  font-size: 8em;\n  transform: translate(-50%, -50%);\n  pointer-events: all;\n  white-space: nowrap;\n  text-align: center;\n  span {\n    font-size: 0.6em;\n  }\n\n  @media only screen and (max-width: 900px) {\n    font-size: 4em;\n  }\n`\n\nconst Global = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n\n  html,\n  body,\n  #root {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    user-select: none;\n    overflow: hidden;\n  }\n\n  #root {\n    overflow: auto;\n    padding: 0px;\n  }\n\n  body {\n    position: fixed;\n    overflow: hidden;\n    overscroll-behavior-y: none;\n    font-family: -apple-system, BlinkMacSystemFont, avenir next, avenir, helvetica neue, helvetica, ubuntu, roboto, noto, segoe ui, arial, sans-serif;\n    color: black;\n    background: white;\n  }\n`\n","import * as THREE from 'three'\nimport React, { Suspense } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport Stars from './3d/Stars'\nimport Planets from './3d/Planets'\nimport Effects from './3d/Effects'\nimport Particles from './3d/Particles'\nimport Enemies from './3d/Enemies'\nimport Rocks from './3d/Rocks'\nimport Explosions from './3d/Explosions'\nimport Rings from './3d/Rings'\nimport Track from './3d/Track'\nimport Ship from './3d/Ship'\nimport Ships from './3d/Ships'\nimport Rig from './3d/Rig'\nimport Hud from './Hud'\nimport useStore from './store'\n\nexport default function App() {\n  const { fov } = useStore((state) => state.mutation)\n  const actions = useStore((state) => state.actions)\n  const health = useStore((state) => state.health)\n  const type = useStore((state) => state.type)\n\n  return (\n    <div onPointerMove={actions.updateMouse} onClick={health ? actions.shoot : undefined}>\n      <Canvas\n        linear\n        mode=\"concurrent\"\n        dpr={[1, 1.5]}\n        gl={{ antialias: false }}\n        camera={{ position: [0, 0, 2000], near: 0.01, far: 10000, fov }}\n        onCreated={({ gl, camera }) => {\n          actions.init(camera)\n          gl.setClearColor(new THREE.Color('#020209'))\n        }}>\n        <fog attach=\"fog\" args={['#070710', 100, 700]} />\n        <ambientLight intensity={0.25} />\n        <Stars />\n        <Explosions />\n        <Track />\n        <Particles />\n        <Rings />\n        <Suspense fallback={null}>\n          <Rocks />\n          <Planets />\n          {/* <Enemies /> */}\n          <Rig>\n            <Ship />\n            {/* <Ships /> */}\n          </Rig>\n        </Suspense>\n        <Effects />\n      </Canvas>\n      <Hud />\n    </div>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}